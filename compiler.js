const fs = require('fs');
const path = require('path');

const syntaxMap = require('./uaScriptSyntax');
const transliterationTable = require('./transliterationTable');

// –ó—á–∏—Ç—É—î–º–æ –≤–º—ñ—Å—Ç —Ñ–∞–π–ª—É .uajs
const readUAscriptFile = (filePath) => {
    try {
      return fs.readFileSync(filePath, 'utf-8');
    } catch (error) {
      console.error(`–¢–∞–º –≤–∏–ª—ñ–∑–ª–∞ —à–ª—è–ø–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É ${filePath}: ${error.message}`);
      process.exit(1);
    }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—ó –∑–º—ñ–Ω–Ω–∏—Ö
const transliterate = (word) => {
    return word
        .replace(/'/g, '')
        .split('')
        .map(char => transliterationTable[char] || char)
        .join('');
};

const getConsoleLogVariable = (consoleLog) => {
    const regex = /\(([^)]+)(?:,([^)]+))?\)/;
    const matches = consoleLog.match(regex);

    console.log('matches', matches);
};

// –ö–æ–º–ø—ñ–ª—è—Ü—ñ—è UAscript –≤ JavaScript
const compileUAscript = (uaScriptCode = '') => {
    // –ó–∞–º—ñ–Ω—é—î–º–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å UAscript –Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å JavaScript
    let jsCode = uaScriptCode;

    for (const key in syntaxMap) {
        if (syntaxMap.hasOwnProperty(key)) {
            if (key === '*–≤–∏–≤–µ–¥–∏_–∫–æ–Ω—Å–æ–ª—å') {
                const regex = new RegExp(`\\*${key}\\(([^)]+)\\)`, 'g');

                jsCode = jsCode.replace(regex, (_, argumentsStr) => {
                    // –†–æ–∑–¥—ñ–ª—è—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫—â–æ –≤–æ–Ω–∏ —î
                    const argumentsArray = argumentsStr.split(',').map(arg => arg.trim());

                    const lastValue = argumentsArray.pop();
                    const transliteratedValue = transliterate(lastValue);

                    return `console.log('${transliteratedValue}', ${transliteratedValue})`;
                });
            }

            const value = syntaxMap[key];
            const regex = new RegExp(`\\*${key}`, 'g');

            jsCode = jsCode.replace(regex, value);
        }
    }

    // –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—é –¥–ª—è —Å–ª–æ–≤–∞ –ø–µ—Ä–µ–¥ "="
    jsCode = jsCode.replace(/(\S+)\s*=/g, (_, word) => `${transliterate(word)} =`);

    return jsCode;
}

// –û—Ç—Ä–∏–º—É—î–º–æ –≤—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª UAscript —Ç–∞ –≤–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª JavaScript
const uaScriptFilePath = process.argv[2];

if (!uaScriptFilePath) {
    console.error('ü§¶ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞ –Ω–∞–∑–≤–∞ —Ñ–∞–π–ª—É UAscript –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º .uajs!');
}

// –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é "dist", —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
const distDirectory = path.join(__dirname, 'dist');
if (!fs.existsSync(distDirectory)) {
    fs.mkdirSync(distDirectory);
};

// –§–æ—Ä–º—É—î–º–æ —à–ª—è—Ö –¥–æ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É JavaScript —É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó "dist"
const jsOutputFilePath = path.join(distDirectory, path.basename(uaScriptFilePath, '.uajs') + '.js');

if (!uaScriptFilePath || !uaScriptFilePath.endsWith('.uajs')) {
    console.error('–ù–µ –∑–∞–≥–∞–Ω—è–π—Å—è, –¥–∞–≤–∞–π –≤—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª UAscript –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º .uajs');
    process.exit(1);
};

// –ó—á–∏—Ç—É—î–º–æ —Ç–∞ –∫–æ–º–ø—ñ–ª—é—î–º–æ UAscript –∫–æ–¥
const uaScriptCode = readUAscriptFile(uaScriptFilePath);
const jsCode = compileUAscript(uaScriptCode);

// –ó–∞–ø–∏—Å—É—î–º–æ —Å–∫–æ–º–ø—ñ–ª—å–æ–≤–∞–Ω–∏–π –∫–æ–¥ —É –≤–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª JavaScript
try {
    fs.writeFileSync(jsOutputFilePath, jsCode, 'utf-8');
    console.log(`–ú–ê–†–ê–î–Ñ–¶! –ö–æ–¥ —É—Å–ø—ñ—à–Ω–æ —Å–∫–æ–º–ø—ñ–ª—å–æ–≤–∞–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Å—å —Ç—É—Ç ${jsOutputFilePath}`);
} catch (error) {
    console.error(`–ü–ï–ß–ê–õ–¨–ö–ê! –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—É —É —Ñ–∞–π–ª ${jsOutputFilePath}: ${error.message}`);
    process.exit(1);
}
